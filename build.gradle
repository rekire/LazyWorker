buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.0'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'kotlin'
apply plugin: 'signing'

group 'eu.rekisoft.android.util'
version '2.0.1'
description 'LazyWorker is a helper class for doing tasks delayed.'

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.5.0'
    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'
    compileOnly 'androidx.lifecycle:lifecycle-common:2.3.1'
    compileOnly 'org.robolectric:android-all:11-robolectric-6757853'
}
publishing {
    publications {
        "$project.name"(MavenPublication) {
            from components.java

            pom {
                url = "https://github.com/rekire/${rootProject.name}"
                name = project.name
                description = "LazyWorker is a helper class for doing tasks delayed."

                scm {
                    connection = "scm:git:git://github.com/rekire/${rootProject.name}.git"
                    developerConnection = "scm:git:git://github.com/rekire/${rootProject.name}.git"
                    url = "https://github.com/rekire/${rootProject.name}"
                }
                developers {
                    developer {
                        id = 'rekire'
                        name = 'Ren√© Kilczan'
                    }
                }
                issueManagement {
                    url = 'https://github.com/rekire/LazyWorker/issues'
                    system = 'GitHub Issues'
                }
                inceptionYear = "2013"
                licenses {
                    license {
                        name = 'Rekisoft Public License (RKSPL)'
                        url = 'https://www.rekisoft.eu/licenses/rkspl.html'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = getReleaseRepositoryUrl()
            def snapshotsRepoUrl = getSnapshotRepositoryUrl()
            url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl

            credentials(PasswordCredentials) {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

signing {
    sign publishing.publications."$project.name"
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUser') ? sonatypeUser : ""
}

def getRepositoryPassword() {
    return hasProperty('sonatypePass') ? sonatypePass : ""
}